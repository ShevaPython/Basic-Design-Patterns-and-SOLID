"""
Паттерн "Адаптер" (Adapter) - это структурный паттерн проектирования, который позволяет объектам с несовместимыми
интерфейсами работать вместе. Он оборачивает объект с несовместимым интерфейсом и предоставляет альтернативный интерфейс,
совместимый с клиентом, который его использует.

Главная идея адаптера заключается в том, чтобы преобразовать интерфейс одного класса в интерфейс, ожидаемый другим классом.
Таким образом, адаптер обеспечивает совместимость между классами, которые в противном случае не могли бы работать вместе
из-за различий в интерфейсах.

В основе адаптера лежит композиция, где объект адаптера содержит или наследует объект с несовместимым интерфейсом и
преобразует вызовы методов этого объекта в вызовы, соответствующие ожидаемому интерфейсу

Примером использования адаптера может быть ситуация, когда необходимо интегрировать сторонний компонент или библиотеку
в приложение, но её интерфейс не соответствует ожиданиям. Создание адаптера позволяет взаимодействовать с этим компонентом, не изменяя основной код приложения.

В целом, адаптеры улучшают повторное использование кода, обеспечивают легкость внесения изменений и способствуют разделению
ответственности между классами.
"""


class CSVReader:
    def read(self, filename):
        # Код для чтения данных из CSV файла
        print(f'Reading data from CSV file: {filename}')


class JSONReader:
    def read(self, filename):
        # Код для чтения данных из JSON файла
        print(f'Reading data from JSON file: {filename}')


class FileReaderAdapter:
    def __init__(self, reader):
        self.reader = reader

    def read_file(self, filename):
        self.reader.read(filename)

csv_reader = CSVReader()
json_reader = JSONReader()

adapter1 = FileReaderAdapter(csv_reader)
adapter2 = FileReaderAdapter(json_reader)

adapter1.read_file('data.csv')  # Читаем данные из CSV файла через адаптер
adapter2.read_file('data.json')  # Читаем данные из JSON файла через адаптер
